// Description Gets Leankit Cards

// Commands
// Get Leankit Cards

const username = process.env.LEANKIT_USER_NAME;
const password = process.env.LEANKIT_PASSWORD;
const hostname = process.env.LEANKIT_HOSTNAME;
const targetBoardId = process.env.TARGET_BOARD_ID;
const baseURL = "https://" + hostname;
const url = baseURL + "/io/card/";
const request = require( "request" );
const auth = "Basic " + new Buffer( username + ":" + password ).toString( "base64" );

const getAllCardsOnBoard = cardData => {
	let output = [];
	cardData.cards.map( card => {
		output.push( card.title );
		output.push( `Card id: ${ card.id }` );
    } );
	return output.join( "\n" );
};

const getCards = ( url ) => {
	return new Promise( ( resolve, reject ) => {
		request.get( {
			url: url,
			headers: {
				"Authorization": auth
            }
        }, ( err, res, body ) => {
			if ( err ) {
				return reject( err );
            }
            resolve( JSON.parse( body ) );
        } );
    } );
};

const getCard = cardId => {
	var cardUrl = url + cardId;
    // console.log ( cardUrl );
	return new Promise( ( resolve, reject ) => {
		request.get( {
			url: cardUrl,
			headers: { "Authorization": auth }
        }, ( err, res, body ) => {
			if ( err ) {
				return reject( err );
            }
			resolve( JSON.parse( body ) );
        } );
    } );
};

const getFullCard = ( cardId ) => {
return getCard( cardId ).then( card => {
        // console.log ( card );

    return `${ card.title } ${ card.type.title } ${ card.customFields[ 0 ].value } ${ card.customFields[ 1 ].value } ${card.tags.join( ", " )}`;
    } );
};

const getCardIds = cardData => {
    // console.log( cardData );
	return cardData.cards.map( card => {
    	return card.id;
    } );
};

const getExtendedCardInfo = cardIds => {
	const promises = cardIds.map( id => {
		return getFullCard( id );
		} );
	return Promise.all( promises );
};

module.exports = robot => {
robot.respond( /what cards are on the deployments board/, msg => {
    const query = "?board=" + targetBoardId + "&lane_class_types=active&only=title,customId,lane,id";
    const queryurl = url + query;
    getCards( queryurl ).then( cards => {
        const results = getAllCardsOnBoard( cards );
        msg.reply( results );
        } ).catch( err => {
        console.log( err );
        } );
    } );

robot.respond( /get card details on the deployments board/, msg => {
	const query = "?board=" + targetBoardId + "&lane_class_types=active&only=title,id";
	const queryurl = url + query;
	getCards( queryurl ).then( cards => {
		return getCardIds( cards );
        } ).then( cardIds => {
	return getExtendedCardInfo( cardIds );
        } ).then( cardData => {
	msg.reply( cardData.join( "\n" ) );
        } ).catch( err => {
	console.log( err );
        } );
    } );
};
